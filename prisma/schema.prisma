generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  account_id    Int          @id @default(autoincrement())
  username      String       @unique(map: "username") @db.VarChar(100)
  password_hash String       @db.VarChar(255)
  role          account_role @default(ADMIN)
  created_at    DateTime     @default(now()) @db.Timestamp(0)
  updated_at    DateTime     @default(now()) @db.Timestamp(0)
}

model applicants {
  applicants_id Int                       @id @default(autoincrement())
  user_id       Int
  vacancy_id    Int
  current_stage applicants_current_stage?
  created_at    DateTime                  @default(now()) @db.Timestamp(0)
  updated_at    DateTime                  @default(now()) @db.Timestamp(0)
  user          users                     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  vacancy       vacancies                 @relation(fields: [vacancy_id], references: [vacancies_id], onDelete: Cascade)
  details       applicants_details[]

  @@unique([user_id, vacancy_id], map: "uniq_user_vacancy")
  @@index([vacancy_id], map: "fk_app_vacancy")
}

model applicants_details {
  detail_applicants_id Int                       @id @default(autoincrement())
  applicants_id        Int
  stage                applicants_details_stage
  attempt_no           Int                       @default(1)
  status               applicants_details_status @default(PENDING)
  notes                String?                   @db.Text
  penilaian            String?                   @db.Text
  schedule_at          DateTime?                 @db.DateTime(0)
  created_at           DateTime                  @default(now()) @db.Timestamp(0)
  updated_at           DateTime                  @default(now()) @db.Timestamp(0)
  applicants           applicants                @relation(fields: [applicants_id], references: [applicants_id], onDelete: Cascade)

  @@index([applicants_id], map: "applicants_details_applicants_id_fkey")
}

model documents_files {
  documents_files_id Int      @id @default(autoincrement())
  cv_path            String?  @db.VarChar(255)
  id_card_path       String?  @db.VarChar(255)
  certificate_path   String?  @db.VarChar(255)
  photo_path         String?  @db.VarChar(255)
  created_at         DateTime @default(now()) @db.Timestamp(0)
  updated_at         DateTime @default(now()) @db.Timestamp(0)
  users              users[]
}

model users {
  user_id              Int                      @id @default(autoincrement())
  NIK                  String?                  @unique(map: "NIK") @db.VarChar(32)
  full_name            String                   @db.VarChar(200)
  gender               users_gender?
  place_of_birth       String?                  @db.VarChar(100)
  date_of_birth        DateTime?                @db.Date
  documents_files_id   Int?
  phone_number         String?                  @db.VarChar(50)
  email                String?                  @unique(map: "email") @db.VarChar(150)
  marital_status       String?                  @db.VarChar(50)
  religion             String?                  @db.VarChar(50)
  address              String?                  @db.VarChar(255)
  village              String?                  @db.VarChar(100)
  subdistrict          String?                  @db.VarChar(100)
  district_town        String?                  @db.VarChar(100)
  province             String?                  @db.VarChar(100)
  university_school    String?                  @db.VarChar(150)
  department_faculty   String?                  @db.VarChar(150)
  study_program        String?                  @db.VarChar(150)
  educational_level    users_educational_level?
  work_experience      String?                  @db.Text
  banned_until         DateTime?                @db.Date
  personality_test_url String?                  @db.VarChar(255)
  created_at           DateTime                 @default(now()) @db.Timestamp(0)
  updated_at           DateTime                 @default(now()) @db.Timestamp(0)
  applicantss          applicants[]
  documents            documents_files?         @relation(fields: [documents_files_id], references: [documents_files_id])

  @@index([documents_files_id], map: "users_documents_files_id_fkey")
}

model vacancies {
  vacancies_id     Int               @id @default(autoincrement())
  title            String            @db.VarChar(200)
  location         String?           @db.VarChar(150)
  type             vacancies_type
  degree           vacancies_degree?
  qualification    String?           @db.Text
  responsibilities String?           @db.Text
  documents        String?           @db.Text
  benefit          String?           @db.Text
  deadline         DateTime?         @db.Date
  is_open          Boolean           @default(true)
  created_at       DateTime          @default(now()) @db.Timestamp(0)
  updated_at       DateTime          @default(now()) @db.Timestamp(0)
  applicantss      applicants[]
}

enum applicants_details_stage {
  HR_INT
  SKILL_TEST
  USER_INT
  FINAL_INT
  OFFERING
}

enum vacancies_type {
  Full_Time @map("Full-Time")
  Part_Time @map("Part-Time")
  Freelance
}

enum account_role {
  ADMIN
  PENGAWAS
  INTERVIEWER
}

enum applicants_current_stage {
  HR_INT
  SKILL_TEST
  USER_INT
  FINAL_INT
  OFFERING
  HIRED
  REJECTED
}

enum users_gender {
  MALE
  FEMALE
}

enum applicants_details_status {
  PENDING
  PASSED
  FAILED
  SKIPPED
}

enum vacancies_degree {
  SMA_SMK  @map("SMA/SMK")
  Diploma
  Sarjana
  Magister
}

enum users_educational_level {
  SMA_SMK  @map("SMA/SMK")
  Diploma
  Sarjana
  Magister
}
